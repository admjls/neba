<section>
    <header><h2>Architecture</h2></header>

    <p>The following documentation is not meant to be complete in a sense of covering every implementation detail. It strives to illustrate
        the core design ideas, as well as the most important components and processes of NEBA.
    </p>
    <p>
        The diagrams in this document are created using <a href="http://www.sparxsystems.com/products/ea/">Sparx systems Enterprise Architect</a>. You can
        <a href="assets/documentation/neba.eap">Download the EA file</a>.
    </p>


    <h3 id="architecture_containerview">Container view</h3>

    <p>NEBA amends Sling's open core with further open source software, which in turn is internally structured in modules. We will refer to such
    component compositions using the generic term <em>container</em>. NEBA is comprised of the following containers:</p>

    <div class="image centered"><img src="images/documentation/project-technologies.svg" style="width:70em;max-width: 100%" alt="NEBA is composed of a core and api bundle. The core bundle extends the gemini-blueprint bundle as a fragment, and uses Spring and the Slign as well as the JCR API."></div>

    <h3 id="architecture_modules">Modules view</h3>

    <p>NEBA consists of the following modules. Each module is represented by a single OSGi bundle and a corresponding maven module.</p>

    <div class="image centered"><img src="images/documentation/project-modules-overview.svg" style="width:40em;max-width: 100%" alt="NEBA consists of two modules, api and core. the api comprises annotations, interfaces and the neba:defineObjects tag library. The core implements the api and exports nothing."></div>

    <h3 id="architecture_corepackages">Core packages view</h3>

    <p>Each package of the core represents a semantically grouped amount of features. The following diagram shows the most important feature groups
    and illustrates the overall design approach of the core</p>

    <div class="image centered"><img src="images/documentation/io.neba.core.svg" style="width:65em;max-width: 100%" alt="The NEBA core module's internal package structure."></div>

    <h3 id="architecture_postprocessing">Application context post-processing</h3>

    <p>The central feature of NEBA is the registration of Spring beans using the NEBA API, for instance beans annotated with @ResourceModel.
    To do so, NEBA attaches to the construction process
    of Spring application contexts. As soon as all beans are successfully created, but prior to the publication of the context, NEBA post-processes the context
    and looks up beans using NEBA API annotations or implementing NEBA API interfaces.</p>

    <div class="image centered"><img src="images/documentation/abstract-registration-process.svg" style="width:65em;max-width: 100%" alt="Upon bundle activation, the gemini-blueprint ActivationHandler is triggered, which invokes the NEBA extension point responsible for resource model detection and context enrichment."></div>

    <h3 id="architecture_modelregistration">Resource model registration and adapter factory provisioning</h3>

    <p>The registration of resource models and the subsequent management of the resource model metadata for mapping purposes
    account for the most valuable NEBA features. Likewise, they require a well-designed collaboration of context post-processing, metadata creation and -storage
    as well as updates of the generic resource model adapter factory. The following communication diagram illustrates the complete resource
    model registration process, from a bundle change event to the publication of the registered resource model metadata via a Sling adapter factory.</p>

    <div class="image centered"><img src="images/documentation/resourcemodel-registration.svg" style="width:85em;max-width: 100%" alt="Detected resource models are tracked in the core's ModelRegistry and made available via a generic AdapterFactory."></div>
</section>