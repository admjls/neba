<section>
	<header><h2 id="api_SelfTest">Writing self-testing applications with NEBA</h2></header>

	<p>NEBA supports the notion of <em>self-testing applications</em> via the @SelfTest annotation. This annotation can be used on any number of methods
		of singleton Spring beans. Methods annotated with @SelfTest must be public, void and must not expect an argument.</p>

	{% highlight java %}
	@Service
	public class SomeSpringSingleton {

	@SelfTest("Test mail server connectivity")
	public void arbitraryMethodName {
	if (cannotConnectToSmtpServer()) {
	throw new RuntimeException("Unable to connect to the SMTP server " +
	this.serverName + ":" + this.serverPort + ".");
	}
	}

	}
	{% endhighlight %}

	<p>Following, the method is regarded as a self-test and is made available via the NEBA self-test console (/system/console/selftests).
		These tests can be executed manually at any time. Furthermore, an XML file representing the execution results of all tests can be fetched via HTTP by authenticated users,
		thus allowing connecting monitoring tools (such as nagios) to the self test console.
		<img src="images/userguide/selftest-console.png" alt="The NEBA self test console"/>
	</p>

	<p><em>Note:</em> Recent Sling versions contain <a href="http://sling.apache.org/documentation/bundles/sling-health-check-tool.html">Sling Health Check</a>, a feature
		intended for the same purpose - self-testing Sling applications. If your Sling version supports Health Check, you may consider using this out of the box feature
		instead of the @SelfTest approach.</p>
</section>