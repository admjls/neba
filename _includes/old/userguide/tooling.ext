<section>
	<header><h2 id="tooling">NEBA tooling for developers and administrators</h2></header>

	<p>To support developers beyond writing resource models, NEBA ships with a set of useful development and administration tools for exploring resource model
		characteristics as well as quickly resolving the resource model / content relationships. Finally, an log viewer integrated into the
		Felix console greatly improves issue analysis in cases where serial access to the system is an issue.</p>

	<h3 id="tooling_modelregistry">NEBA model registry</h3>

	<p>The <em>model registry</em> allows viewing all currently registered resource models, their source bundle and the resource types they are mapping to. In addition, the models
		can be filtered to find models mapping to specific content or models compatible to specific classes.</p>

	<p><a class="image full" href="old/images/userguide/modelregistry-large.png"><img src="old/images/userguide/modelregistry-large.png" alt="The NEBA model registry" /></a></p>

	<h3 id="tooling_modelstatistics">NEBA model statistics</h3>

	<p>For every detected resource model, NEBA extracts metadata that is reused to efficiently map resources to these models. Whenever resources are mapped to models,
		NEBA gathers data regarding the mapping duration. This combined resource model data is available via a JSON REST API in the model statistics console (/system/console/modelstatistics/api/statistics).</p>

	<section>
		<p><a class="image left" href="old/images/userguide/modelstatistics-large.png"><img src="old/images/userguide/modelstatistics.png" alt="The NEBA model statistics" /></a></p>

		<p>The NEBA model statistics console (/system/console/modelstatistics) uses this data to visualize the corresponding model characteristics. In addition, the console
			allows querying the data to display models with certain features, for instance to discover models performing below average and/or excessively
			loading data from the repository.</p>

		<p>This unique feature makes visible what could usually only be discovered through time-consuming analysis using a profiling tool.
			Furthermore, the model statistics allow real-time performance monitoring and analysis on <em>any system</em>.
			This is especially valuable for productive systems - there, content changes may trigger performance degradation and attaching a profiler
			usually isn't an option. NEBA's model statistics console makes finding performance bottleneck's in resource models fast and easy - further
			adding to better performing implementations.</p>
	</section>

	<br>

	<section>
		<header><h4 id="tooling/modelstatistics/demo">NEBA model statistics - interactive demo</h4></header>

		<p>Give the model statistics console a real try with a small set of sample data obtained from a real project.</p>

		<script src="old/userguide/modelstatistics/lib/d3.v3.min.js" charset="utf-8"></script>
		<script src="old/userguide/modelstatistics/lib/d3-star-plot-0.0.3.min.js" charset="utf-8"></script>
		<script src="old/userguide/modelstatistics/lib/parser.js" charset="utf-8"></script>
		<script src="old/userguide/modelstatistics/script.js" charset="utf-8"></script>

		{% include old/userguide/tooling_demo_style.ext %}

		<form method="post" enctype="multipart/form-data" action="">
			<div class="ui-widget-header ui-corner-top buttonGroup">
				<button type="button" id="helpWithExpressions"
						title="Displays a help text underneath the filter expression input field">Help</button>
			</div>
		</form>

		<div id="plotarea">
			<form>
				<input type="text" id="filter" data-default-value="Begin typing to create a filter expression" />
			</form>
			<div id="expressionHelp">
				<h2>Writing expressions</h2>
				An expression filters the list of resource models. It allows finding models with specific performance characteristics. For instance, <span class="expressionExample">mappings > instantiations</span>
				finds models causing more than one subsequent resource to model mapping when instantiated. The query <span class="expressionExample">averageMappingDuration > average(averageMappingDuration)</span>
				finds resource models who's individual average mapping duration is higher than the average mapping duration of all resource models. All properties, except when enclosed in entire(...) or average(...), apply
				to the <em>individual</em> model. For instance, <span class="expressionExample">mappingDurationMedian < averageMappingDuration</span> translates to "find models who's mapping duration median is less than it's average mapping duration".
				One can also employ sub clauses and arithmetic expressions. For instance, <span class="expressionExample">totalTime > entire(totalTime) * 0.05</span> finds models that are responsible for more than 5% of the entire mapping time.

				<h2>The model visualization</h2>
				The models are ordered by their total mapping time (totalTime). Each graph exhibits the following dimensions;
				<table>
					<tbody>
					<tr><th>Instantiations</th><td>The number of times the model was instantiated</td></tr>
					<tr><th>Subsequent mappings</th><td>The total number of resource to model mappings initiated by a resource model, i.e. the subsequently used resource models.</td></tr>
					<tr><th>&#x00D8; duration</th><td>The average duration of one resource to model mapping for this type</td></tr>
					<tr><th>median</th><td>The median duration of one resource to model mapping for this type</td></tr>
					<tr><th>Lazy fields</th><td>The number of lazy fields (Optional fields or lazy-loading collections) of this resource model</td></tr>
					<tr><th>Greedy fields</th><td>The number of non-lazy fields (neither Optional nor lazy-loading collection) of this resource model</td></tr>
					<tr><th>Total time</th><td>The total time spend mapping this model</td></tr>
					</tbody>
				</table>
			</div>
			<div id="target"></div>
		</div>
	</section>


	<h3 id="tooling_logviewer">The  log viewer</h3>
	<p>
		Developers do not always have serial access to a system in order to analyze log files - however, being able to investigate the log files of a Sling instance
		is often key to finding and resolving issues timely. Here, NEBA provides the log viewer Felix console plugin - a safe way to view analyze and obtain the configured
		log files of a Sling instance for authenticated uses ot the Felix console.
	</p>
	<p>
		The log viewer console allows filtering log files with regard to the log level, tailing and following logfile changes and instantly downloading
		logfiles as ZIP compressed packages for offline analysis.
	</p>

	<p><a class="image full" href="old/images/userguide/logviewer-large.png"><img src="old/images/userguide/logviewer-large.png" alt="The NEBA log viewer" /></a></p>
</section>